(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{417:function(t,e,r){"use strict";r.r(e);var a=r(11),i=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),r("p",[t._v("JSON.stringify() 方法将一个 JavaScript 对象或值转换为 JSON 字符串，如果指定了一个 replacer 函数，则可以选择性地替换值，或者指定的 replacer 是数组，则可选择性地仅包含数组指定的属性。"),r("a",{attrs:{href:"#refer-anchor-1"}},[r("sup",[t._v("1")])])]),t._v(" "),r("h2",{attrs:{id:"语法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("    JSON.stringify(value[, replacer [, space]])\n")])])]),r("table",[r("thead",[r("tr",[r("th",{staticStyle:{"text-align":"right"}},[t._v("参数")]),t._v(" "),r("th",[t._v("描述")])])]),t._v(" "),r("tbody",[r("tr",[r("td",{staticStyle:{"text-align":"right"}},[t._v("value")]),t._v(" "),r("td",[t._v("将要序列化成 一个 JSON 字符串的值。")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"right"}},[t._v("replacer")]),t._v(" "),r("td",[t._v("（可选）如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为 null 或者未提供，则对象所有的属性都会被序列化。")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"right"}},[t._v("space")]),t._v(" "),r("td",[t._v("（可选），指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；如果该参数为字符串（当字符串长度超过10个字母，取其前10个字母），该字符串将被作为空格；如果该参数没有提供（或者为 null），将没有空格。")])])])]),t._v(" "),r("h2",{attrs:{id:"注意事项"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("转换值如果有 toJSON() 方法，该方法定义什么值将被序列化。")])]),t._v(" "),r("li",[t._v("非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中。")]),t._v(" "),r("li",[t._v("布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。")]),t._v(" "),r("li",[r("strong",[t._v("undefined、任意的函数以及 symbol 值，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 null（出现在数组中时）。函数、undefined 被单独转换时，会返回 undefined，如JSON.stringify(function(){}) or JSON.stringify(undefined)")]),t._v(".")]),t._v(" "),r("li",[r("strong",[t._v("对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。")])]),t._v(" "),r("li",[t._v("所有以 symbol 为属性键的属性都会被完全忽略掉，即便 replacer 参数中强制指定包含了它们。")]),t._v(" "),r("li",[t._v("Date 日期调用了 toJSON() 将其转换为了 string 字符串（同Date.toISOString()），因此会被当做字符串处理。")]),t._v(" "),r("li",[r("strong",[t._v("NaN 和 Infinity 格式的数值及 null 都会被当做 null。")])]),t._v(" "),r("li",[t._v("其他类型的对象，包括 Map/Set/WeakMap/WeakSet，仅会序列化可枚举的属性。")]),t._v(" "),r("li",[t._v("当尝试去转换 BigInt"),r("a",{attrs:{href:"#refer-anchor-2"}},[r("sup",[t._v("1")])]),t._v(' 类型的值会抛出TypeError ("BigInt value can\'t be serialized in JSON")（BigInt值不能JSON序列化）')])]),t._v(" "),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),r("div",{attrs:{id:"refer-anchor-1"}}),t._v(" "),r("ul",[r("li",[t._v("[1] "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN"),r("OutboundLink")],1)])]),t._v(" "),r("div",{attrs:{id:"refer-anchor-2"}}),t._v(" "),r("ul",[r("li",[t._v("[2] "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=i.exports}}]);